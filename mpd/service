#!/usr/bin/python
import sys
import mpd
import json
import time
import socket
import os
import cgi
import traceback
import SimpleHTTPServer, SocketServer
import urllib
import threading
from qrcode.image.pure import PymagingImage
from qrcode.main import QRCode

id_to_file = {}
file_to_id = {}

LOCAL_PREFIX = "http://192.168.23.7:8080"

def new_song(filename):
    id = file_to_id.get(filename)
    if id is None:
        id = "%x" % len(id_to_file)
        id_to_file[id] = filename
        file_to_id[filename] = id

    try:
        os.unlink("qrcode.png")
    except:
        pass
    print "new mappnig %s -> %r" % (id, filename)
    with file("qrcode.png", "wb") as f:
        qr = QRCode(border=1, image_factory=PymagingImage)
        qr.add_data("%s/%s#wlan only" % (LOCAL_PREFIX, id))
        im = qr.make_image()
        im.save(f)
    return id

PREFIX = "http://192.168.23.42/storage"

def http_server():
    class Server(SimpleHTTPServer.SimpleHTTPRequestHandler):
        def do_GET(self):
            filename = id_to_file.get(self.path[1:])
            if not filename:
                self.send_response(404, 'OK')
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write("nope")
            else:
                self.send_response(200, 'OK')
                self.send_header('Content-type', 'text/html; charset=utf-8')
                self.end_headers()
                self.wfile.write("""
                    <html>
                      <head>
                        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"/> <!--320-->
                      </head>
                      <body>
                        <h2>info-beamer mpd qr downloader</h2>
                        <hr/>
                        Hier gibt's die gescannten Musik: <a href='%s'>%s</a>. 
                        <br/><br/>
                        Zum runterladen lang antippen und "Link
                        speichern..." w&auml;hlen.
                      </body>
                    """ % (
                        cgi.escape('%s/%s' % (PREFIX, urllib.quote(filename))),
                        os.path.basename(filename),
                    )
                )
                # self.send_header('Location', '%s/%s' % (PREFIX, urllib.quote(filename)))

    SocketServer.TCPServer(('0.0.0.0', 8080), Server).serve_forever()

http = threading.Thread(target=http_server)
http.daemon = True
http.start()

restart = time.time() + 3*60*60

def mpd_loop():
    client = mpd.MPDClient()
    client.connect(host='192.168.23.42', port='6600')

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    prev_name = None

    while time.time() < restart:
        status = dict(
            song = client.currentsong(),
            stats = client.stats(),
            status = client.status(),
        )

        filename = status['song'].get('file', '-')

        try:
            total = float(status['song']['time'])
            elaps = float(status['status']['elapsed'])
            status['percent'] = 1.0 / total * elaps
        except:
            status['percent'] = 0

        # pprint.pprint(status)
        try:
            status['song']['file'] = os.path.basename(filename)
        except:
            pass

        for k, v in status['song'].iteritems():
            try:
                status['song'][k] = v.decode("utf8")
            except:
                pass

        sock.sendto('root/mpd/update:%s' % json.dumps(status, ensure_ascii=False).encode("utf8"),
            ('127.0.0.1', 4444))

        if filename != prev_name:
            new_song(filename)
            prev_name = filename

        time.sleep(0.5)

def main():
    while time.time() < restart:
        try:
            mpd_loop()
        except Exception, err:
            traceback.print_exc()
            time.sleep(10)

if __name__ == "__main__":
    main()
